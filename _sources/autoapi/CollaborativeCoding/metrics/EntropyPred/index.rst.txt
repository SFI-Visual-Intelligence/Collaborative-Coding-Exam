CollaborativeCoding.metrics.EntropyPred
=======================================

.. py:module:: CollaborativeCoding.metrics.EntropyPred


Classes
-------

.. autoapisummary::

   CollaborativeCoding.metrics.EntropyPred.EntropyPrediction


Module Contents
---------------

.. py:class:: EntropyPrediction(num_classes, macro_averaging=None)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: stored_entropy_values
      :value: []



   .. py:attribute:: num_classes


   .. py:method:: __call__(y_true: torch.Tensor, y_logits: torch.Tensor)

      Computes the Shannon Entropy of the predicted logits and stores the results.
      Args:
          y_true: The true labels. This parameter is not used in the computation
                  but is included for compatibility with certain interfaces.
          y_logits: The predicted logits from which entropy is calculated.
      Returns:
          torch.Tensor: The aggregated entropy value(s) based on the specified
                        method ('mean', 'sum', or 'none').



   .. py:method:: __returnmetric__()


   .. py:method:: __reset__()


