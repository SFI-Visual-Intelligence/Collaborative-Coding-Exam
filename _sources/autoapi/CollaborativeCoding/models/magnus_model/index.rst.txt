CollaborativeCoding.models.magnus_model
=======================================

.. py:module:: CollaborativeCoding.models.magnus_model


Attributes
----------

.. autoapisummary::

   CollaborativeCoding.models.magnus_model.image_shape


Classes
-------

.. autoapisummary::

   CollaborativeCoding.models.magnus_model.MagnusModel


Module Contents
---------------

.. py:class:: MagnusModel(image_shape, num_classes: int)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: layer1


   .. py:attribute:: layer2


   .. py:attribute:: layer3


   .. py:method:: forward(x)

      Defines the forward pass of the MagnusModel.
      Args:
          x (torch.Tensor): A four-dimensional tensor with shape
                            (Batch Size, Channels, Image Height, Image Width).
      Returns:
          torch.Tensor: The output tensor containing class logits for each input sample.



.. py:data:: image_shape
   :value: (3, 28, 28)


